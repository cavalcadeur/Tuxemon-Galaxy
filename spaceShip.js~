class SpaceShip extends Object {
    
    constructor(img,taille,pos,mass){
        super(img,taille,pos,mass);

        this.img = [];
        for (let i = 0; i < 8; i ++){
            this.img[i] = new Image();
            this.img[i].src = "images/numerous/" + img + i + ".png";
        }
        this.imgRay = new Image(); this.imgRay.src = "images/rings.png";
        this.ray = false; this.inShop = true;
        this.nRay = 4; this.lengthRay = 80; this.powerRay = 1;
        this.n = 2;
        this.imgId = 0;
        this.mass = this.mass / 100;
        this.speed = 0.15;
        this.rotSpeed = 0.1;
        this.money = 10000;
        this.cargo = new Cargo(1,[]);
        this.keys = ["ArrowUp","ArrowRight","ArrowLeft"," "];
        this.upgrades = [1,1,false];
        this.prices = [[0,500,1000,2000,10000,900000],[0,500,1000,2000,10000],5000];
    }
    
    draw(Painter){
        Painter.imgObj(this.img[this.imgId],this.position[0],this.position[1],this.size,this.r,true);
        if (this.ray){
            let offSet = [Math.cos(this.r) * this.lengthRay / this.nRay,Math.sin(this.r) * this.lengthRay / this.nRay];
            let alpha = 1;
            for (let i = 0; i < this.nRay;i ++){
                if (i == this.nRay - 1) alpha = 2-this.n;
                else if (i == 0) alpha = this.n - 1;
                else alpha = 1;
                Painter.imgObj(this.imgRay,
                               this.position[0] + (i + this.n)*offSet[0],
                               this.position[1] + (i + this.n)*offSet[1],
                               (i + this.n) * this.lengthRay / this.nRay,
                               this.r,false,alpha);
            }
        }
        this.cargo.draw(Painter);
    }
    
    act(t,keyBoard,objects,g,zoom){
        this.imgId = 0;
        zoom = Math.sqrt(zoom);
        
        let force = this.getForce(objects);
        force[0] *= g; force[1] *= g;
        if (keyBoard.isPressed(this.keys[1])){
            this.r += this.rotSpeed;
            this.imgId += 2;
        }
        if (keyBoard.isPressed(this.keys[2])){
            this.r -= this.rotSpeed;
            this.imgId += 1;
        }
        if (keyBoard.isPressed(this.keys[0])){
            force[0] += Math.cos(this.r) * this.speed / zoom;
            force[1] += Math.sin(this.r) * this.speed / zoom;
            this.imgId += 4;
        }
        if (keyBoard.isPressed(this.keys[3])){
            this.ray = true;
            this.n -= 0.05;
            if (this.n < 1) this.n = 2;
            this.captureRay(objects);
        }
        else{
            this.ray = false;
            this.n = 1;
        }
        
        this.dir[0] += force[0]; this.dir[1] += force[1];
        this.position[0] += this.dir[0]; this.position[1] += this.dir[1];
    }

    captureRay(objects){
        // First thing to do : check if the planetoid is in the capture Ray
        let pos;
        let vecR = [Math.cos(this.r), Math.sin(this.r)];
        let vecN = [Math.sin(this.r),- 1 * Math.cos(this.r)];
        for (let i = 0; i < objects.length; i ++){
            if (objects[i].getSize() <= this.lengthRay && objects[i].capturable()){
                pos = objects[i].pos();
                pos = [pos[0] - this.position[0],pos[1] - this.position[1]];
                pos = [pos[0] * vecR[0] + pos[1] * vecR[1],pos[0] * vecN[0] + pos[1] * vecN[1]];
                if (pos[0] > 0 && pos[0] <= this.lengthRay &&
                    pos[1] <= 0.4 * this.lengthRay && pos[1] >= -0.4 * this.lengthRay) this.suck(objects[i]);
            }
        }
    }

    suck(obj){
        if (obj.isShop){
            this.inShop = true;
            return;
        }
        let vec = obj.pos();
        vec = [this.position[0] - vec[0], this.position[1] - vec[1]];
        if (Math.abs(vec[0]) + Math.abs(vec[1]) < this.lengthRay/10){
            this.capture(obj);
        }
        else{
            let taille = Math.hypot(vec[0],vec[1]);
            taille = this.powerRay/taille;
            vec[0] *= taille; vec[1] *= taille;
            obj.applyForce(vec);
            obj.slowDown(0.7,this.dir);
        }
    }

    capture(obj){
        this.addCargo(obj.getInfo());
        obj.vanish();
    }

    addCargo(pack){
        this.cargo.add(pack);
    }

    drawShop(Painter){
        Painter.drawShopOverlay(this.money,this.upgrades);
        this.cargo.show = 1; this.cargo.n = -1; this.cargo.draw(Painter);

        let buttons = [["X",0,0,50,50,30],["SELL",W-250,H-60,200,50,40]];
        for (let i = 0; i < 3; i ++){
            buttons.push(["",W/2 + 300,H/2 - 150 + i*120,200,80,50]);
        }
        buttons[2][0] = this.prices[0][this.upgrades[0]] + "€";
        buttons[3][0] = this.prices[1][this.upgrades[1]] + "€";
        if (this.upgrades[2]) buttons[4][0] = "Sold";
        else buttons[4][0] = this.prices[2] + "€";
        for (let i = 0; i < buttons.length; i++){
            Painter.drawButton(buttons[i],this.isHovered(buttons[i]));            
        }   
    }

    isHovered(butt){
        return Mouse.isOn(butt[1],butt[2],butt[3],butt[4]);
    }

    clicShop(){
        let buttons = [["X",0,0,50,50,30],["SELL",W-250,H-60,200,50,40]];
        for (let i = 0; i < 3; i ++){
            buttons.push(["",W/2 + 300,H/2 - 150 + i*120,200,80,50]);
        }
        for (let i = 0; i < buttons.length; i ++){
            if (this.isHovered(buttons[i])){
                this.clicOn(i);
                return;
            }
        }
    }

    clicOn(n){
        if (n == 0) {this.inShop = false; this.cargo.show = 0;}
        else if (n == 1) this.sell();
        else if (n == 2) this.upgrade(0);
        else if (n == 3) this.upgrade(1);
        else if (n == 4) this.upgrade(2);
    }

    sell(){
        this.money += this.cargo.sellPack();
    }

    upgrade(n){
        if (n == 2){
            if (this.upgrades[2]) return;
            else {
                if (this.money >= this.prices[2]) {
                    this.money -= this.prices[2]; this.upgrades[2] = true;
                }
            }
        }
        else if (this.upgrades[n] < this.prices[n].length){
            if (this.money >= this.prices[n][this.upgrades[n]]){
                this.money -= this.prices[n][this.upgrades[n]];
                this.upgrades[n] += 1;
                this.updateRay();
            }
        }
        
    }

    updateRay(){
        let rays = [[80,1],[160,2],[500,6],[1000,12],[1500,18],[3000,36]];
        this.lengthRay = rays[this.upgrades[0]][0];
        this.powerRay = rays[this.upgrades[0]][1];

        this.cargo.taille = this.upgrades[1];
    }
    
    actShop(){

    }
    
};
